import { h, render } from "preact";
import Blog from "../../../components/Blog";

export const Metadata = {
  title: "Canned Web Development",
  date: "14 September, 2020",
  description: "A recent feature addition to Lighthouse had me wondering about the intersection of modern web development techniques and the exploitation of the free labor of open source software maintainers.",
  slug: "/blog/canned-web-development/",
  sitemapPriority: 1.0
};

export default () => (
  <Blog title={Metadata.title} date={Metadata.date}>
    <p><a href="https://twitter.com/addyosmani/status/1304676118822174721" rel="noopener">A new Lighthouse feature</a> was recently rolled out which calls out opportunities to use smaller alternatives to popular JavaScript libraries. I was initially excited for this feature because <a href="https://alistapart.com/article/responsible-javascript-part-1/" rel="noopener">I've long evangelized for reducing how much JavaScript we use</a>. We have <a href="https://httparchive.org/reports/state-of-javascript#bytesJs" rel="noopener">a serious problem</a> on our hands in modern web development, and that problem is our collective overreliance on JavaScript.</p>
    <p>There was a predictable backlash on Twitter after this feature was rolled out, but it didn't play out the way I expected. <a href="https://twitter.com/bitandbang/status/1304827633184669696" rel="noopener">The issue of how this feature could impact open source software maintainers was raised</a> in a way that led me to consider how this feature could end up being a bad idea over the long haul. It's not often I disagree with <em>any</em> guidance to reduce JavaScript usage. I even don't disagree with the <em>spirit</em> of what Google tried to accomplish here, just the <em>way</em> in which they did it. Lighthouse shouldn't be the venue for this kind of guidance, and no company should bring its influence to bear on the community in such a way that could be harmful, no matter how inadvertently so.</p>
    <p>As my attention drifted to other things over the next couple of days, the idle part of my mind whittled away to the core of what bothered me so much about the current state of the web and open source software. It eventually occurred to me that this industry is failing in its work in two critical ways:</p>
    <ol type="1">
      <li>We are exploiting the labor of open source software maintainers and expecting community members to remedy that exploitation via donation capitalism.</li>
      <li>Our mental model for how we build for the web is too reliant on canned solutions to unique problems.</li>
    </ol>
    <p>The first of these failures is both abjectly depressing and utterly predictable in a hypercapitalist society. Large corporations are benefitting from the labor of open source software maintainers with no meaningful regulation compelling them to be compensated. When something is free, <a href="https://alistapart.com/article/the-high-price-of-free/" rel="noopener">a different sort of price is paid</a>. When an open source offering becomes popular, the maintainers are inevitably buried in feature requests and issues they have to address&mdash;typically during their unpaid free time. When an open source offering becomes simultaneously popular <em>and</em> an indispensable part of toolchains, a small group of people are asked to do important work for free. Crowdfunding or other flavors of donation capitalism are <em>not</em> the solution, but rather a blood-soaked bandage that relies on the goodwill of a community that appears to be increasingly entitled to free labor.</p>
    <p>The second of these failures is almost equally depressing. As the web has matured, we've adopted a mindset that prioritizes velocity over thoughtfulness. The default behavior of the web is something I like to call &quot;the document web&quot;, where each navigation is synchronously driven by the server. Everything we've been trying to do since Web 2.0 has been one long effort in escaping this inextricable part of how the web behaves. The result is a parade of escape hatches from the web's default behavior. We're told that these escape hatches&mdash;pushed and marketed as critical software by hugely influential tech companies&mdash;are necessary in order to deliver good user experiences.</p>
    <p>As much as we'd like to think our respective situations require mountains of JavaScript to provide a &quot;rich&quot; user experience, that's almost certainly not the case. So much of what we use the web for is a perfect fit for the document web model, and needs only a modest amount of JavaScript to do the job. E-commerce websites are a perfect example of how egregious our abuse of JavaScript today is. Those sites didn't need megabytes of JavaScripts in the late 90s and early 2000s to be financially successful, and they don't need that much JavaScript to be financially successful today. Any success these companies enjoy isn't <em>because</em> of how we build for the web today, but in spite of it. We seem to aggressively A/B test every feature except for the ones that have universal importance to actual people: <a href="https://httparchive.org/reports/state-of-the-web#bytesTotal" rel="noopener">speed</a> and <a href="https://webaim.org/projects/million/" rel="noopener">accessibility</a>.</p>
    <p>Our industry's collective mindset is a prominent obstacle to creating fast and accessible websites. Compounding this problem is that too few boot camps are preparing new web developers to think critically about what problems are best solved by JavaScript and which aren't&mdash;and that those problems that are best solved by JavaScript can be solved without engaging in frivolous framework whataboutism. The question developers should ask more often when grappling with framework shortcomings shouldn't be &quot;what about that other framework?&quot;, but rather &quot;what's best for the user experience?&quot;. That's a hard question to answer, since your situation will compel you to answer it in your own way, but the outcomes are more rewarding for <em>people</em>. To get there, you have to be comfortable with the idea building a bespoke solution that works best for your situation.</p>
    <p>I don't want to fritter away my remaining years in this industry by engaging in an endless string of framework migrations, deciding that the sole dependence on some golden dependency is a &quot;best practice&quot; only to find out later on that an almost religious adherence to that &quot;best practice&quot; has failed me in some intractable way. Nor do I want to abide by so much wasted effort brought on by those migrations which have the unfortunate side-effect of leaving open source software maintainers open to exploitation by well-to-do corporations and abuse by ill-tempered and demanding community members.</p>
    <p>Lighthouse is a valuable tool, one I'm sincerely grateful for. But wielding it in such a way that tells people which libraries and frameworks to use doesn't get us away from the problem of canned web development and the exploitation of free labor in open source software; it only further entrenches us in it.</p>
  </Blog>
);
